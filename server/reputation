local GangReputations = {}

-- Initialize gang reputation
RegisterServerEvent("gang:initReputation")
AddEventHandler("gang:initReputation", function(gangName)
    if not GangReputations[gangName] then
        GangReputations[gangName] = Config.GangReputation.DefaultPoints
    end
end)

-- Update reputation
RegisterServerEvent("gang:updateReputation")
AddEventHandler("gang:updateReputation", function(gangName, points)
    if GangReputations[gangName] then
        GangReputations[gangName] = GangReputations[gangName] + points
        TriggerClientEvent("gang:syncReputation", -1, gangName, GangReputations[gangName])
    end
end)

-- Get reputation tier
function GetGangTier(points)
    local tier = "Neutral"
    if points >= Config.GangReputation.TierThresholds.Legendary then
        tier = "Legendary"
    elseif points >= Config.GangReputation.TierThresholds.Feared then
        tier = "Feared"
    elseif points >= Config.GangReputation.TierThresholds.Respected then
        tier = "Respected"
    end
    return tier
end

-- Sync reputations
AddEventHandler("playerConnecting", function()
    TriggerClientEvent("gang:syncAllReputations", source, GangReputations)
end)


-- Add reputation for a heist completion
RegisterServerEvent("gang:heistCompleted")
AddEventHandler("gang:heistCompleted", function(gangName)
    if GangReputations[gangName] then
        local points = Config.GangReputation.Bonuses.HeistCompletion
        GangReputations[gangName] = GangReputations[gangName] + points

        -- Sync reputation update
        TriggerClientEvent("gang:syncReputation", -1, gangName, GangReputations[gangName])

        -- Notify gang members
        TriggerEvent("gang:notifyMembers", gangName, "Your gang has gained " .. points .. " reputation for completing a heist!")
    end
end)

-- Subtract reputation for a member's arrest
RegisterServerEvent("gang:memberArrested")
AddEventHandler("gang:memberArrested", function(gangName)
    if GangReputations[gangName] then
        local points = Config.GangReputation.Penalties.Arrest
        GangReputations[gangName] = GangReputations[gangName] + points

        -- Sync reputation update
        TriggerClientEvent("gang:syncReputation", -1, gangName, GangReputations[gangName])

        -- Notify gang members
        TriggerEvent("gang:notifyMembers", gangName, "Your gang has lost " .. math.abs(points) .. " reputation due to a member's arrest.")
    end
end)

-- Notify all members of a gang
RegisterServerEvent("gang:notifyMembers")
AddEventHandler("gang:notifyMembers", function(gangName, message)
    for _, playerId in ipairs(GetGangMembers(gangName)) do
        TriggerClientEvent("chat:addMessage", playerId, {
            color = {255, 0, 0},
            multiline = true,
            args = {"Gang Notification", message}
        })
    end
end)

function GetGangMembers(gangName)
    local members = {}

    -- Query the database for members of the specified gang
    local result = MySQL.query.await("SELECT player_id FROM gang_members WHERE gang_name = ?", {gangName})

    if result then
        for _, row in ipairs(result) do
            -- Assuming `player_id` corresponds to in-game identifiers (e.g., license or Steam ID)
            local playerId = GetPlayerFromIdentifier(row.player_id)
            if playerId then
                table.insert(members, playerId)
            end
        end
    end

    return members
end

-- Helper function to convert database identifiers to active player IDs
function GetPlayerFromIdentifier(identifier)
    for _, playerId in ipairs(GetPlayers()) do
        local playerIdentifier = GetPlayerIdentifier(playerId, 0) -- Replace with your identifier type
        if playerIdentifier == identifier then
            return playerId
        end
    end
    return nil
end

